/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-09-27 01:21:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import vo.NoticeCompanyVO;
import java.util.List;

public final class company_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("vo.NoticeCompanyVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
List<NoticeCompanyVO> list = (List<NoticeCompanyVO>)request.getAttribute("NoticeCompanyList"); 
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>대덕 인재 개발원</title>\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/company.css\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"https://uicdn.toast.com/grid/latest/tui-grid.css\" />\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"body__container\">\n");
      out.write("\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "main-nav.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("job", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${user.getMember_job()}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), request.getCharacterEncoding()), out, false);
      out.write("\n");
      out.write("	\n");
      out.write("	<main>\n");
      out.write("		<section>\n");
      out.write("			<div class=\"btn-wrap\">\n");
      out.write("				<button type=\"button\" class=\"insert\">추가</button>			\n");
      out.write("				<button type=\"button\" class=\"delete\">삭제</button>\n");
      out.write("				<button type=\"button\" class=\"save\">저장</button>			\n");
      out.write("			</div>\n");
      out.write("			<div class=\"grid-wrap\">\n");
      out.write("				<div id=\"recruitGrid\"></div>\n");
      out.write("			</div>\n");
      out.write("		</section>\n");
      out.write("	</main>\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=1a7bc73fb550d50d510296af57950207\"></script>\n");
      out.write("<script src=\"https://uicdn.toast.com/grid/latest/tui-grid.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"../js/jquery.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"../js/global.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"../js/company.js\"></script>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("const Grid = tui.Grid;  //인스턴스 객체 생성\n");
      out.write("let recruitData = [\n");
for (NoticeCompanyVO vo : list){
      out.write("  \n");
      out.write("	{\n");
      out.write("    title: \"");
      out.print(vo.getCompany_name() );
      out.write("\",\n");
      out.write("    addr: \"");
      out.print(vo.getCompany_addr() );
      out.write("\",\n");
      out.write("    salary: \"");
      out.print(vo.getCompany_salary() );
      out.write("\",\n");
      out.write("    section: \"");
      out.print(vo.getCompany_section() );
      out.write("\",\n");
      out.write("    intake: \"");
      out.print(vo.getRecuruit_intake() );
      out.write("\",\n");
      out.write("    idx: \"");
      out.print(vo.getCompany_idx() );
      out.write("\"\n");
      out.write("  },\n");
}
      out.write("\n");
      out.write("]\n");
      out.write("\n");
      out.write("let	 recruitGrid = new Grid({\n");
      out.write("  el: document.getElementById('recruitGrid'),\n");
      out.write("  rowHeaders: ['checkbox'],\n");
      out.write("  columns: [\n");
      out.write("    {\n");
      out.write("      header: '회사명',\n");
      out.write("      name: 'title',\n");
      out.write("      align: 'center',\n");
      out.write("      editor: 'text'\n");
      out.write("    },\n");
      out.write("    {\n");
      out.write("      header: '주소',\n");
      out.write("      name: 'addr',\n");
      out.write("      align: 'center',\n");
      out.write("      editor: 'text'\n");
      out.write("    },\n");
      out.write("    {\n");
      out.write("      header: '제시 연봉',\n");
      out.write("      name: 'salary',\n");
      out.write("      align: 'center',\n");
      out.write("      editor: 'text'\n");
      out.write("    },\n");
      out.write("    {\n");
      out.write("      header: '모집 분야',\n");
      out.write("      name: 'section',\n");
      out.write("      align: 'center',\n");
      out.write("      editor: 'text'\n");
      out.write("    },\n");
      out.write("    {\n");
      out.write("      header: '채용인원',\n");
      out.write("      name: 'intake',\n");
      out.write("      align: 'center',\n");
      out.write("      editor: 'text'\n");
      out.write("    },\n");
      out.write("    {\n");
      out.write("    	header: 'idx',\n");
      out.write("	    name: 'idx',\n");
      out.write("	    hidden : true\n");
      out.write("    }\n");
      out.write("  ],\n");
      out.write("  data: recruitData\n");
      out.write("});\n");
      out.write("\n");
      out.write("$('.insert').on('click', function(){\n");
      out.write("	const obj = {\n");
      out.write("			title: \"\",\n");
      out.write("			addr: \"\",\n");
      out.write("			salary: \"\",\n");
      out.write("			section: \"\",\n");
      out.write("			intake: \"\"\n");
      out.write("	}\n");
      out.write("	recruitData.unshift(obj)\n");
      out.write("	$('#recruitGrid').html(\"\")\n");
      out.write("	recruitGrid = new Grid({\n");
      out.write("		  el: document.getElementById('recruitGrid'),\n");
      out.write("		  scrollX: true,\n");
      out.write("		  rowHeaders: ['checkbox'],\n");
      out.write("		 columns: [\n");
      out.write("				    {\n");
      out.write("				      header: '회사명',\n");
      out.write("				      name: 'title',\n");
      out.write("				      align: 'center',\n");
      out.write("				      editor: 'text'\n");
      out.write("				    },\n");
      out.write("				    {\n");
      out.write("				      header: '주소',\n");
      out.write("				      name: 'addr',\n");
      out.write("				      align: 'center',\n");
      out.write("				      editor: 'text'\n");
      out.write("				    },\n");
      out.write("				    {\n");
      out.write("				      header: '제시 연봉',\n");
      out.write("				      name: 'salary',\n");
      out.write("				      align: 'center',\n");
      out.write("				      editor: 'text'\n");
      out.write("				    },\n");
      out.write("				    {\n");
      out.write("				      header: '모집 분야',\n");
      out.write("				      name: 'section',\n");
      out.write("				      align: 'center',\n");
      out.write("				      editor: 'text'\n");
      out.write("				    },\n");
      out.write("				    {\n");
      out.write("				      header: '채용인원',\n");
      out.write("				      name: 'intake',\n");
      out.write("				      align: 'center',\n");
      out.write("				      editor: 'text'\n");
      out.write("				    },\n");
      out.write("				    {\n");
      out.write("				    	header: 'idx',\n");
      out.write("					    name: 'idx',\n");
      out.write("					    hidden : true\n");
      out.write("				    }\n");
      out.write("				    \n");
      out.write("				  ],\n");
      out.write("		  data: recruitData\n");
      out.write("		});\n");
      out.write("})\n");
      out.write("\n");
      out.write("$('.delete').on('click', function() {\n");
      out.write("	const selectedValues   = recruitGrid.getValue(recruitGrid.getCheckedRowKeys(), \"idx\");\n");
      out.write("	const deleteRows = recruitGrid.getCheckedRows();\n");
      out.write("	\n");
      out.write("	for(const ele of deleteRows) {\n");
      out.write("    	delete ele.rowKey;\n");
      out.write("    	delete ele.rowSpanMap;\n");
      out.write("    	delete ele.sortKey;\n");
      out.write("    	delete ele.uniqueKey;\n");
      out.write("    	delete ele._attributes;\n");
      out.write("    	delete ele._disabledPriority;\n");
      out.write("    	delete ele._relationListItemMap;\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	const _data = JSON.stringify(deleteRows)\n");
      out.write("	console.log(_data)\n");
      out.write("	\n");
      out.write("	$.ajax({\n");
      out.write("		url: '/company?cmd=companyDelete',\n");
      out.write("		data: {\n");
      out.write("			json: _data\n");
      out.write("		},\n");
      out.write("		success: function(res) {\n");
      out.write("			alert('삭제 완료')\n");
      out.write("			location.reload()\n");
      out.write("			\n");
      out.write("		},\n");
      out.write("		error: function(e) {\n");
      out.write("			console.log(e)\n");
      out.write("		}\n");
      out.write("	})\n");
      out.write("})\n");
      out.write("\n");
      out.write("\n");
      out.write("$('.save').on('click', function() {\n");
      out.write("	const { rowKey, columnName } = recruitGrid.getFocusedCell();\n");
      out.write("	if (rowKey && columnName) {\n");
      out.write("		recruitGrid.finishEditing(rowKey, columnName);\n");
      out.write("	}\n");
      out.write("	const updatedRows = recruitGrid.getCheckedRows();\n");
      out.write(" \n");
      out.write("	for(const ele of updatedRows) {\n");
      out.write("    	delete ele.rowKey;\n");
      out.write("    	delete ele.rowSpanMap;\n");
      out.write("    	delete ele.sortKey;\n");
      out.write("    	delete ele.uniqueKey;\n");
      out.write("    	delete ele._attributes;\n");
      out.write("    	delete ele._disabledPriority;\n");
      out.write("    	delete ele._relationListItemMap;\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	\n");
      out.write("	const _data = JSON.stringify(updatedRows)\n");
      out.write("	console.log(_data)\n");
      out.write("	\n");
      out.write("	$.ajax({\n");
      out.write("		url: '/company?cmd=companySave',\n");
      out.write("		data: {\n");
      out.write("			json: _data\n");
      out.write("		},\n");
      out.write("		success: function(res) {\n");
      out.write("			alert('저장완료')\n");
      out.write("			location.reload()\n");
      out.write("		},\n");
      out.write("		error: function(e) {\n");
      out.write("			console.log(e)\n");
      out.write("		}\n");
      out.write("	})\n");
      out.write("})\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("Grid.applyTheme('striped');\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
