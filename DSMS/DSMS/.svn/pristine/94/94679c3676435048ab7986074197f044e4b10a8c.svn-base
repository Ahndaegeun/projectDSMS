package controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;

import service.BoardServiceImpl;
import vo.BoardVO;
import vo.CommentVO;
import vo.FileVO;

@WebServlet("/board")
@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 10, maxFileSize = 1024 * 1024 * 30, maxRequestSize = 1024 * 1024
		* 100)
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");

		String cmd = request.getParameter("cmd");
		BoardServiceImpl service = BoardServiceImpl.getInstance();
		RequestDispatcher rd = null;
		int board_idx = 0;

		if (cmd.equals("selectList.do")) {

			List<BoardVO> list1 = null;
			List<BoardVO> list2 = null;
			List<BoardVO> list3 = null;

			Map<String, Object> paramMap = new HashMap<String, Object>();

			paramMap.put("category", 1);
			list1 = service.getAllArticle(paramMap); // 긴급

			paramMap.put("category", 2);
			paramMap.put("cnt", 5);
			list2 = service.getAllArticle(paramMap); // 공지

			paramMap.put("category", 3);
			list3 = service.getAllArticle(paramMap); // 자유

			request.setAttribute("BoardList1", list1);// 긴급
			request.setAttribute("BoardList2", list2);// 공지
			request.setAttribute("BoardList3", list3);// 자유
			rd = request.getRequestDispatcher("/WEB-INF/views/board-list.jsp");

		} else if (cmd.equals("detail")) { // 1

			board_idx = Integer.parseInt(request.getParameter("idx"));
			BoardVO boardInfo = new BoardVO();

			service.updateBoardHit(board_idx);

			boardInfo.setBoard_idx(board_idx);
			boardInfo = service.getOneArticle(boardInfo); // 2 , 7

			request.setAttribute("boardInfo", boardInfo); // 8

			// *********** 댓글 *******************
			List<Map<String, Object>> commentList = new ArrayList<Map<String, Object>>();
			commentList = service.getAllComment(board_idx);

			request.setAttribute("commentList", commentList);

			rd = request.getRequestDispatcher("/WEB-INF/views/board-detail.jsp"); // 9

		} else if (cmd.equals("write")) {
			rd = request.getRequestDispatcher("/WEB-INF/views/board-write.jsp");

		} else if (cmd.equals("modify")) {
			board_idx = Integer.parseInt(request.getParameter("idx"));
			BoardVO boardInfo = new BoardVO();
			boardInfo.setBoard_idx(board_idx);
			boardInfo = BoardServiceImpl.getInstance().getOneArticle(boardInfo); // 2 , 7
			request.setAttribute("boardInfo", boardInfo); // 8
			rd = request.getRequestDispatcher("/WEB-INF/views/board-modify.jsp");

		} else if (cmd.equals("delete")) {

			board_idx = Integer.parseInt(request.getParameter("idx"));
			service.deleteBoard(board_idx);
			response.sendRedirect("/board?cmd=selectList.do");

		} else if (cmd.equals("deleteComment")) {

			CommentVO vo = new CommentVO();
			board_idx = Integer.parseInt(request.getParameter("board_idx"));
			int comment_idx = Integer.parseInt(request.getParameter("comment_idx"));

			vo.setBoard_idx(board_idx);
			vo.setComment_idx(comment_idx);
			service.deleteComment(vo);
			// List<Map<String, Object>> commentList = service.getAllComment(board_idx);
			// request.setAttribute("commentList", commentList);
			BoardVO boardInfo = new BoardVO();
			boardInfo.setBoard_idx(board_idx);
			boardInfo = service.getOneArticle(boardInfo); // 2 , 7

			request.setAttribute("boardInfo", boardInfo); // 8

			List<Map<String, Object>> commentList = new ArrayList<Map<String, Object>>();
			commentList = service.getAllComment(board_idx);

			request.setAttribute("commentList", commentList);

			rd = request.getRequestDispatcher("/WEB-INF/views/board-detail.jsp");

		}
//		else if(cmd.equals("board_hit")) {
//			board_idx= Integer.parseInt(request.getParameter("idx"));
//			service.updateBoardHit(board_idx);
//			
//		}
		else if (cmd.equals("searchData")) {
			String data = request.getParameter("searchDa");

			List<BoardVO> list1 = null;
			List<BoardVO> list2 = null;
			List<BoardVO> list3 = null;
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("search", "Y");
			paramMap.put("searchData", data);

			paramMap.put("category", 1);
			list1 = service.getAllArticle(paramMap); // 긴급

			paramMap.put("category", 2);
			paramMap.put("cnt", 5);
			list2 = service.getAllArticle(paramMap); // 공지

			paramMap.put("category", 3);
			list3 = service.getAllArticle(paramMap); // 자유

			request.setAttribute("BoardList1", list1);// 긴급
			request.setAttribute("BoardList2", list2);// 공지
			request.setAttribute("BoardList3", list3);// 자유
			rd = request.getRequestDispatcher("/WEB-INF/views/board-list.jsp");

		}

		if (!cmd.equals("delete")) {
			rd.forward(request, response);
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		String cmd = request.getParameter("cmd");
		BoardServiceImpl service = BoardServiceImpl.getInstance();
		RequestDispatcher rd = null;
		BoardVO boardInfo = new BoardVO();

		if (cmd.equals("write")) {

			Map<String, Object> map = new HashMap<String, Object>();
			boardInfo.setBoard_title(request.getParameter("board_title"));
			boardInfo.setBoard_content(request.getParameter("board_content"));

			boardInfo.setBoard_category(request.getParameter("board_category"));
			boardInfo.setMember_idx(Integer.parseInt(request.getParameter("member_idx")));
			map.put("boardVO", boardInfo);



//			response.sendRedirect("/board?cmd=selectList.do");

			// 파일 작성

			String uploadPath = "C:/Users/User/Desktop/middleProject/DSMS/src/main/webapp/storage/files";
			String fileName = "";

			File fileUploadDir = new File(uploadPath); // 파일경로 만들기
			if (!fileUploadDir.exists()) {
				fileUploadDir.mkdirs();
			}

			for (Part part : request.getParts()) {
				fileName = extractFileName(part);

				// 구해온 파일명이 공백("")이면 이것은 파일이 아닌 일반 Form data라는 의미
				if (!"".equals(fileName)) { // 파일명이 공백이 아니며
					// 1개의 업로드 파일 정보를 저장할 VO객체 생성
					FileVO fvo = new FileVO();
					fvo.setFile_name(fileName);
					fvo.setFile_path(uploadPath);
					map.put("fileVO", fvo);

					try {
						part.write(uploadPath + File.separator + fileName); // 파일 저장

					} catch (IOException e) {
						System.out.println("업로드 실패!!!" + e.getMessage());
					}
				}

			}
			service.writeArticle(map);
			response.sendRedirect("/board?cmd=selectList.do");

		} else if (cmd.equals("update")) {

			boardInfo.setBoard_title(request.getParameter("board_title"));
			boardInfo.setBoard_content(request.getParameter("board_content"));

			boardInfo.setBoard_category(request.getParameter("board_category"));
			boardInfo.setMember_idx(Integer.parseInt(request.getParameter("member_idx")));
			boardInfo.setBoard_idx(Integer.parseInt(request.getParameter("board_idx")));

			service.modifyArticle(boardInfo);
			response.sendRedirect("/board?cmd=selectList.do");

		} else if (cmd.equals("commentWrite")) {

			CommentVO vo = new CommentVO();
			String comment_content = request.getParameter("comment_content");
			int board_idx = Integer.parseInt(request.getParameter("board_idx"));
			int member_idx = Integer.parseInt(request.getParameter("member_idx"));

			vo.setMember_idx(member_idx);
			vo.setComment_content(comment_content);
			vo.setBoard_idx(board_idx);

			service.writeComment(vo);

		} else if (cmd.equals("modifyCommnet")) {
			CommentVO vo = new CommentVO();
			String comment_content = request.getParameter("comment_content");
			int board_idx = Integer.parseInt(request.getParameter("board_idx"));
			int comment_idx = Integer.parseInt(request.getParameter("comment_idx"));

			vo.setBoard_idx(board_idx);
			vo.setComment_content(comment_content);
			vo.setComment_idx(comment_idx);

			service.modifyCommnet(vo);
		}
	}

	private String extractFileName(Part part) {
		String fileName = "";

		// 헤더의 키값이 'Content-Disposition'인 헤더의 value값을 구한다.
		String contentDisposition = part.getHeader("Content-Disposition");
		String[] items = contentDisposition.split(";"); // ;이 들어간걸 구분
		for (String item : items) {
			if (item.trim().startsWith("filename")) { // trim : 공백 없애기
				// filename="test1.txt" => '='문자를 찾아서 끝까지인데 "는 필요없어서 -1 해준거
				fileName = item.substring(item.indexOf("=") + 2, item.length() - 1);
			}
		}
		return fileName;
	}

}
